<div class="row">
  <div class="col-lg-12">
    <h3 class="page-header">Target Clustering</h3>
  </div>
  <!-- /.col-lg-12 -->
</div>

<div class="row">

  <div class="col-lg-12">
    <div class="panel panel-default">
      <div class="panel-heading">
        Target Clustering
      </div><!-- /.panel-heading -->
      <div class="panel-body">

        <form action="#" id="plot_params" class="form-inline">
          <div class="form-group form-group-sm">
            <label for="maxvalue">Graph max</label>
            <input type="text" name="max" value="100" class="form-control input-sm" id="maxvalue">
          </div>
          <div class="form-group form-group-sm">
            <label for="maxvalue">Graph min</label>
            <input type="text" name="min" value="-100" class="form-control input-sm" id="minvalue">
          </div>
          <div class="form-group form-group-sm">
            <label for="targetvalue">Target value</label>
            <input type="text" name="target" value="50" class="form-control input-sm" id="targetvalue">
          </div>
          <div class="form-group form-group-sm">
            <label for="startdatevalue">Start date</label>
            <input type="text" name="startdate" value="<%= @startDate.strftime("%Y/%m/%d %H:00") -%>" class="form-control input-sm" id="startdatevalue">
          </div>
          <div class="form-group form-group-sm">
            <label for="enddatevalue">End date</label>
            <input type="text" name="enddate" value="<%= @endDate.strftime("%Y/%m/%d %H:00") -%>" class="form-control input-sm" id="enddatevalue">
          </div>
          <div class="form-group form-group-sm">
            <label for="interval_interval_id">Interval</label>
            <%= collection_select(:interval, :interval_id,
                                  Interval.all.order("duration asc"), :duration, :name,
                                  {include_blank: false, :selected => @interval}, class: :'form-control input-sm') %>
          </div>
          <div class="form-group form-group-sm">
            <label for="prosumer_category_prosumer_category_id">Prosumer category</label>
            <%= collection_select(:prosumer_category, :prosumer_category_id,
                                  ProsumerCategory.all.order("id asc"), :id, :name,
                                  {include_blank: false, :selected => @prosumer_category}, class: :'form-control input-sm') %>
          </div>
          <br>
          <div class="form-group form-group-sm">
            <input type="submit" value="update graph" class="form-control input-sm">
          </div>
        </form>

        <div id="placeholder" style="width:600px;height:300px"></div>

        <hr>
        <div id="prosumer_results"></div>

      </div> <!-- /.panel-body -->
    </div> <!-- /.panel -->
  </div>
</div>

<div class="row">
  <div class="col-lg-12">
    <div class="panel panel-default">
      <div class="panel-heading">
        Run matching algorithm
      </div>
      <div class="panel-body">
        <form action="#" id="run_algorithm" class="form-inline">
          <input type="submit" value="Run Algorithm" class="btn btn-primary">
        </form>
        <div id="progress" class="terminal">

        </div>
      </div>
    </div>
  </div>
</div>

<script>
  $(function () {

    $("#startdatevalue, #enddatevalue").datetimepicker();


    var data = [ { data: <%= @timestamps.map{|ts| [ts.to_i * 1000, 50]}.to_json -%>,
                   label: "Targets", editable: true }];


    var options = {
      series: {
        editMode: 'y',
        lines: {
          show: true
        },
        points: {
          show: true
        }
      },
      grid: {
        hoverable: true,
        clickable: true,
        editable: true
      },
      tooltip: true,
      tooltipOpts: {
        content: "'%s'<br>%x<br>%y.2",
        shifts: {
          x: -60,
          y: 25
        }
      },
      xaxis: {
        mode: "time",
        timeformat: "%d/%m/%Y<br>%h:%M:%S",
        timezone: "browser",
        ticks: 2 /*,
         timeformat : "%y/%m/%d-%h:%M:%S",
         tickSize : [12, "hour"]*/
      },
      yaxis: {
        tickDecimals: 0,
        min: 0,
        max: $("#maxvalue").val()
      },
      legend:{
        container: $("#legend"),
        noColumns: 0
      }
    };

    var plot = $.plot($("#placeholder"), data, options);

    $("#placeholder").bind("datadrop", function(event,pos,item) {
        data[item.seriesIndex].data[item.dataIndex] = [pos.x1,pos.y1];
        plot = $.plot($("#placeholder"), data, options);
    });


    $("#plot_params").submit(function (){
      options.yaxis.max = $("#maxvalue").val();
      options.yaxis.min = $("#minvalue").val();
      var target = parseFloat($("#targetvalue").val());

      var start_timestamp = (new Date($("#startdatevalue").val()).getTime());
      var end_timestamp = (new Date($("#enddatevalue").val()).getTime());
      var duration = 1000 * parseInt($("#interval_interval_id").val());

      data = [ {
        data: [],
        label: "Targets",
        editable: true
      }];
      for (var i = 0; i <= (end_timestamp - start_timestamp) / duration; i++) {
        data[0].data[i] = [start_timestamp + i * duration, target];
      }
      plot = $.plot($("#placeholder"), data, options);
      $("#progress").empty();
      $("#prosumer_results").empty();
      return false;
    });

    $("#run_algorithm").submit(function () {
      data[0].editable = false;
      plot = $.plot($("#placeholder"), data, options);

      $("#progress").empty();
      $("#prosumer_results").empty();
      $("#run_algorithm :input").prop("disabled", true);

      var params = {
        startDate: new Date($("#startdatevalue").val()),
        endDate: new Date($("#enddatevalue").val()),
        interval: $("#interval_interval_id").val(),
        targets: JSON.stringify(data[0].data),
        prosumer_category_id: $("#prosumer_category_prosumer_category_id").val()
      }

     // alert("/stream/run_algorithm&" + $.param(params));

      var source = new EventSource("/stream/run_algorithm?" + $.param(params));

      source.addEventListener('output', function(e) {
        //   console.log("Datapoint received ", e);
        var message = JSON.parse(e.data);
        $("#progress").append("<BR>" + message).animate({scrollTop: $('#progress').prop("scrollHeight")}, 5);
      });

      source.addEventListener('result', function(e) {
        var message = JSON.parse(e.data);
        source.close();
        $("#progress").append("<BR>" + message).animate({scrollTop: $('#progress').prop("scrollHeight")}, 5);
        $("#run_algorithm :input").prop("disabled", false);
        data[0].editable = true;
        data[1] = {
          data: message.consumption,
          label: "approximation", editable: false
        };
        plot = $.plot($("#placeholder"), data, options);

        $.each(message.prosumers, function(i,v) {
          if ( ! $('#prosumer_results').is(':empty')) {
            $("#prosumer_results").append(", ");
          }
          $("#prosumer_results").append("<a href='/prosumers/" + v.id + "'>"+ v.name+"</a>");
       //   console.log("<a href='/prosumers/" + v.id + "'>"+ v.name+"</a>,");
        });


      });

      return false;
    });
  });

</script>