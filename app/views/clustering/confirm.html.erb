<div class="row">
  <div class="col-lg-12">
    <h3 class="page-header"><small>Automatic Clustering:</small> Confirm clustering</h3>
  </div>
  <!-- /.col-lg-12 -->
</div>

<div class="row">
  <div class="col-lg-12">
    <div class="panel panel-default">
      <div class="panel-heading">
        confitm clustering
      </div>
      <div class="panel-body">

        <%= form_tag "/clustering/save", class: "form-inline" do %>
          <% @clusters.each_with_index do |cl, i| %>
            <% if i > 0 -%><hr/><% end -%>
            <div class="row">
              <div class="col-md-8">
                <div class="form-group">
                  <div class="input-group">
                    <%= label_tag "Name:", nil, class: "control-label" %>
                    <%= text_field_tag "clusternames[]", cl.name, {class: "form-control"} %>
                  </div>
                  <div class="input-group"> 
                    <%= label_tag "Description:", nil, class: "control-label" %>
                    <%= text_field_tag "clusterdescriptions[]", cl.description, {class: "form-control"} %>
                   </div>
                  <div class="input-group">
                    <%= label_tag "Prosumers:", nil, class: "control-label" %>
                    <ul class="list-inline connectedSortable", id: "<%= "prosummer_list_#{i}" -%>" >
                      <% cl.prosumers.each do |p| %>
                        <li id="<%= "prosumer_#{p.id}" -%>"><%= p.name -%><div style="visibility: hidden;"><%= p.id -%></div></li>
                      <% end %>
                    </ul>
                    
                  </div>
                  
                  <%= hidden_field_tag "clusterprosumers[]", cl.prosumers.map {|p| p.id}.join(","), id: "hidden_#{i}" %>
                </div>
              </div>  
              <div class="col-md-4">
                <div id="<%= "chart_#{i}" -%>" style="height: 150px;width:200px" ></div>
              </div>  
            </div>
          <% end %>
            
          <div class="row ">
            <div class="col-md-8">
              <div class="actions">
                 <%= submit_tag "Confirm", class: "btn btn-primary" %>
              </div>
            </div>
            <div class="col-md-4">
              <div class="input-group">
                <%= label_tag "Threshold:", nil, class: "control-label" %>
                <input value="200.0" class="form-control" type="text" id="threshold_input"/>
              </div>
              <div class="actions">
                <button type="button" id="set_threshold" class="btn btn-info btn-xs">Set Threshold</button>
              </div>
            </div>
          </div>
        <% end %>

      </div>
    </div>
  </div>
  <!-- /.col-lg-12 -->
</div>
<script>
$(function() {
  
    var energy_consumption = <%= JSON.pretty_generate(Prosumer.all.map { |p| {id: p.id, dps: p.data_points.where(interval: 3, timestamp: (Time.now - 7.days)..Time.now).map { |dp| {time: dp.timestamp.to_i, value: dp.consumption} } } }).html_safe -%>;
    
    var threshold = $("#threshold_input").val();
    
    var sumArrays = function(arr1, arr2) {
      result = {};
      if (arr1 == null) {
        $.each(arr2, function(index, value) {
          result[value.time] = 0;
        });  
      } else {
        result = arr1;  
      }
      $.each(arr2, function(index, value) {
        if (typeof result[value.time] == 'undefined') {
          result[value.time] = value.value;
        } else {
          result[value.time] += value.value;
        }
      });
      
      return result
    };
    
    var format = function(arr) {
      var aggr = [];
      var thresh = [];
      if (arr != null) {
        $.each(arr, function(index, value) {
          aggr.push([index * 1000.0, value]);
          thresh.push([index * 1000.0, threshold]);
        });
      }
      return [{
        label: "Consumption",
        data: aggr.sort()
      },{
        label: "Threshold",
        data: thresh.sort()
      }];
    };
    
    var rePlot = function(clusterOf) {
      var data_table = [];
      $.each(energy_consumption, function(index, value) {
        var cl = clusterOf[value.id];
        data_table[cl] = sumArrays(data_table[cl], value.dps);
      });
      $('.connectedSortable').each(function(index, value){
      // $.each(data_table, function(index, value){
         
        $.plot($("#chart_" + index), format(data_table[index]), {
          series: {
            lines: {
              show: true
            },
            points: {
              show: true
            }
          },
          grid: { hoverable: true, clickable: true },
          tooltip: true,
          tooltipOpts: {
              content: "'%s'<br/>%x<br/>%y.2",
              shifts: {
                  x: -60,
                  y: 25
              }
          },
          xaxis : {
            mode : "time",
            timeformat : "%y/%m/%d<br/>%h:%M:%S",
            timezone : "browser",
            ticks : 3 /*,
             timeformat : "%y/%m/%d-%h:%M:%S",
             tickSize : [12, "hour"]*/
          },
          yaxis : {
            tickDecimals: 2
          }
        });
      });
    };
    
    var sortList = function (list) {
      $(list).children('li').sort(function (a,b) {
        return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());
      }).appendTo($(list));
    };
    
    var getIds = function(list) {
      var a = [];
      $(list).children('li').children('div').each(function(index, item) {
        a[index] = $(item).text();
      });
      return a;
    }
    
    var refreshLists = function() {
      var clusterOf = [];
      $('.connectedSortable').each(function(index, listItem) {
        sortList(listItem);
        clusterIds = getIds(listItem);
        $.each(clusterIds, function(idx,val) {
          clusterOf[val] = index;
        });
        $("#hidden_"+index).val(clusterIds.join(','));
      });
      rePlot(clusterOf);
    };
    
    var makeTooltips = function() {
      $.each(energy_consumption, function(index, value) {
        var max = Number.MIN_VALUE;
        var min = Number.MAX_VALUE;
        $.each(value.dps, function(ind, val) {
          max = Math.max(max, val.value);
          min = Math.min(min, val.value);
        });
        
        $("#prosumer_" + value.id).attr("title", "Max: " + max+", min: "+ min);
        
      });
      
    };
      
    $("#set_threshold").click(function(){
      threshold = $("#threshold_input").val();
      refreshLists();
    });  
      
    var itemclone, idx;
    $(".connectedSortable").sortable({
        start: function(event, ui) {

            // The following code creates a "shadow object in the originating list"
            // Removed because it is buggy
            
            //create clone of current seletected li
            /*
            itemclone = $(ui.item).clone();
                //get current li index position in list
                idx = $(ui.item).index();
                //If first li then prepend clone on first position 
                if (idx === 0) {
                    itemclone.css('opacity', '0.5');
                    $(this).prepend(itemclone);
                }
                //Else Append Clone on its original position
                else {
                    itemclone.css('opacity', '0.7');
                    $(this).find("li:eq(" + (idx - 1) + ")").after(itemclone);
                }*/
    

        },
        change: function(event, ui) {
            //alert('change');
            //While Change event set clone position as relative
            //$(this).find("li:eq(" + idx + ")").css('position', 'relative');
        },
        stop: function() {

            // And this removes the shadow object
            //Once Finish Sort, remove Clone Li from current list
    //        $(this).find("li:eq(" + idx + ")").remove();

            refreshLists();
            
        },
        connectWith: ".connectedSortable"

    }); //.disableSelection();
    refreshLists();
    makeTooltips();

});

</script>
