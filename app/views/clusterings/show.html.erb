<div class="row">
  <div class="col-lg-12">
    <h3 class="page-header"><small>Clustering:</small> <%= @clustering.name -%>
      <small> 
        | <%= link_to 'Edit', edit_clustering_path(@clustering), class: 'btn btn-info btn-xs' %>
        | <%= link_to 'All clusterings', clusterings_path, class: 'btn btn-warning btn-xs'%>
      </small>
    </h3>
  </div>
  <!-- /.col-lg-12 -->
</div>

<div class="row equal">
  <div class="col-lg-6">
    <div class="panel panel-default">
      <div class="panel-heading">
        Clustering info
      </div>
      <div class="panel-body">
        <dl class="dl-horizontal">
          <dt>Name:</dt>
          <dd><%= @clustering.name -%></dd>
          
          <dt>Description:</dt>
          <dd><%= @clustering.description -%></dd>
          
          <dt>Clusters:</dt>
          <dd>
            <%= render(partial: "clustering_short", :locals => {:clustering => @clustering}) %>
          </dd>
        </dl>
      </div>
    </div>
  </div>

  <div class="col-lg-6">
    <div class="panel panel-default">
      <div class="panel-heading">
        Prosumer location
      </div>
      <div class="panel-body">
        <%= render partial: "charts/map", 
          locals: {
            prosumers: Prosumer.with_locations,
            clustering: @clustering,
            height: "230px"
          }
        %>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <% @clustering.temp_clusters.each do |tc| %>
    <div class="col-lg-3 col-md-4 col-sm-6 cols-xs-12">
      <div class="panel panel-default">
        <div class="panel-heading">
          <%= tc.name %>
        </div>
        <div class="panel-body">
          <table class="table">
            <thead>
              <tr>
                <th></th>
                <th>For.</th>
                <th>Ideal</th>
                <th>Real</th>
              </tr>
            </thead>
            <tbody>
              <% stats = Hash[Market::Calculator.new(prosumers: tc.prosumers,
                                                     startDate: @startDate,
                                                     endDate: @endDate)
                                      .calcCosts[:dissagrgated]
                                      .select {|d| d[:id] < 0}
                                      .map {|d| [d[:id], d]}] -%>
              <% -2.upto(-1) do |i| -%>
                <tr>
                  <th><%= stats[i][:name] -%></th>
                  <td><%= stats[i][:forecast].round -%></td>
                  <td><%= stats[i][:ideal].round -%></td>
                  <td><%= stats[i][:real].round -%></td>
                </tr>
              <% end -%>
              <tr>
                <th>Perc. impr.</th>
                <td></td><td></td>
                <td><%= ((stats[-1][:real] - stats[-2][:real]) /stats[-2][:real] * 100).round if stats[-2][:real]>0-%>%</td>
              </tr>

            </tbody>
          </table>
          <div id="<%= "chart_#{tc.id}" -%>" style="height: 200px;" ></div>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
  $(function () {
    var idata = <%=
        JSON.pretty_generate(@clustering.temp_clusters.map do |tc|
            {
                id: tc.id,
                vals: [{
                    label: :consumption,
                    data: DataPoint.where(prosumer: tc.prosumers,
                                      interval: 3,
                                      timestamp: @startDate..@endDate)
                               .order(timestamp: :asc)
                               .group(:timestamp)
                               .select("timestamp as ts, sum(consumption) as s")
                               .map{|p| [p.ts.to_i * 1000, p.s] }
                },{
                    label: :forecast,
                    data: DataPoint.where(prosumer: tc.prosumers,
                                      interval: 3,
                                      f_timestamp: @startDate..@endDate)
                               .order(f_timestamp: :asc)
                               .group(:f_timestamp)
                               .select("f_timestamp as ts, sum(f_consumption) as s")
                               .map{|p| [p.ts.to_i * 1000, p.s] }
                }]
            }
        end).html_safe -%>;

    console.log(idata);
    for (var i = 0; i < idata.length; i++) {
      $.plot("#chart_"+idata[i].id, idata[i].vals, {
        series: {
          lines: {
            show: true
          },
          points: {
            show: true
          }
        },
        grid: {
          hoverable: true,
          clickable: true
        },
        tooltip: true,
        tooltipOpts: {
          content: "'%s'<br/>%x<br/>%y.2",
          shifts: {
            x: -60,
            y: 25
          }
        },
        xaxis: {
          mode: "time",
          timeformat: "%d/%m/%Y<br/>%h:%M:%S",
          timezone: "browser",
          ticks: 2 /*,
           timeformat : "%y/%m/%d-%h:%M:%S",
           tickSize : [12, "hour"]*/
        },
        yaxis: {
          tickDecimals: 0
        },
        legend:{
          container: null,
          noColumns: 0
        }
      } );
      console.log({data: idata[i].vals, label: "test"});

    }
  });

</script>